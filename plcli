#!/bin/bash

# allow for notes to be longer, add -rn for reading long notes
# color the output nicely

TASKS_DIR="$HOME/.local/share/plcli"
mkdir -p "$TASKS_DIR"      # Create directory if missing
TASKS_DATA="$TASKS_DIR/tasks.csv"

# Character Limits
MAX_NAME=25
MAX_PRIORITY=10
MAX_DUE=12
MAX_NOTE=30

RED=$(tput setaf 1)
GREEN=$(tput setaf 2)
RESET=$(tput sgr0)

TASKS_DATA="$TASKS_DIR/tasks.csv"
if [ ! -f "$TASKS_DATA" ]; then
    touch "$TASKS_DATA"
fi

# helper functions
generate_id() {
    if [ ! -s "$TASKS_DATA" ]; then
        echo 1
    else
        # Get the first field (ID) from each line, sort numerically, pick highest
        local MAX
        MAX=$(grep -o '^[^,]*' "$TASKS_DATA" | sort -n | tail -1)
        echo $((MAX+1))
    fi
}

list_task() {

    local CURRENT_TIME
    CURRENT_TIME=$(date +"%m/%d/%Y %I:%M %p")

    if [ ! -s "$TASKS_DATA" ]; then
        echo "No tasks found in data file."
        return
    fi

    clear
    # Define header with fixed column widths
    echo "Welcome to plannerCLI! (plcli)                 (Version 0.0.1) | Last Refresh: $CURRENT_TIME"
    echo '=================================================================================================='
    printf "| %-5s | %-25s | %-10s | %-12s | %-30s |\n" "ID:" "Name:" "Priority:" "Due Date:" "Additional Note:"
    echo '--------------------------------------------------------------------------------------------------'

    # Read the CSV file 
    while IFS=',' read -r ID NAME PRIORITY DUE NOTE; do
        printf "| %-5s | %-25s | %-10s | %-12s | %-30s |\n" "$ID" "$NAME" "$PRIORITY" "$DUE" "$NOTE"
    done < "$TASKS_DATA"
    
    echo '--------------------------------------------------------------------------------------------------'
    echo '=================================================================================================='
}

check_length() {
    local value="$1"
    local max_len="$2"
    local field_name="$3"

    if [ "${#value}" -gt "$max_len" ]; then
        echo "${RED}Error: '$field_name' cannot exceed $max_len characters.${RESET}"
        exit 1
    fi
}

# argument functions
help_task() {
  LIGHT_BLUE=$(tput setaf 12)
  RESET=$(tput sgr0)
  
  cat <<EOF
${LIGHT_BLUE}
Usage: plcli [options]

No options given will clear the screen & print the planner.

Task Options:
    -h, --help
        Displays tasks help message.

    -ai, --add-interactive
        Add a new task with an interactive prompt.

    -a, --add "NAME" [-p PRIORITY] [-d DUE] [-n NOTE]
        Add a new task with optional values.

    -u, --update ID [-t "NEW TITLE"] [-p PRIORITY] [-d DUE] [-n NOTE]
        Update a task given ID number, change any value optionally.

    -d, --delete ID
        Delete a task given ID number.

    -s, --swap ID1 ID2
        Swap the ID numbers of two tasks, reordering them in default view.
${RESET}
EOF
}

add_task() {

    # inst. temp variables for new task
    local NAME="$1"
    local PRIORITY="$2"
    local DUE="$3"
    local NOTE="$4"

    # ensure task has a name
    if [ -z "$NAME" ]; then
        echo "${RED}Error: please give a name for this task.${RESET}"
        exit 1
    fi

    # Check length constraints
    check_length "$NAME" "$MAX_NAME" "Name"
    check_length "$PRIORITY" "$MAX_PRIORITY" "Priority"
    check_length "$DUE" "$MAX_DUE" "Due"
    check_length "$NOTE" "$MAX_NOTE" "Note"

    # inst. a new ID number
    local ID=$(generate_id)
    echo "$ID,$NAME,$PRIORITY,$DUE,$NOTE" >> "$TASKS_DATA"
    echo "Task added with ID: $ID"

}

update_task() {
    local TARGET_ID="$1"
    local NEW_NAME="$2"
    local NEW_PRIORITY="$3"
    local NEW_DUE="$4"
    local NEW_NOTE="$5"

    if [ -z "$TARGET_ID" ]; then
        echo "${RED}Error: no task ID specified to update.${RESET}"
        exit 1
    fi

    local MOD_DATA=""
    local FOUND="false"

    while IFS="," read -r ID NAME PRIORITY DUE NOTE; do
        if [ -z "$ID" ]; then
            continue
        fi
        if [ "$ID" = "$TARGET_ID" ]; then
            FOUND=true
            if [ -n "$NEW_NAME" ]; then
                NAME="$NEW_NAME"
            fi
            if [ -n "$NEW_PRIORITY" ]; then
                PRIORITY="$NEW_PRIORITY"
            fi
            if [ -n "$NEW_DUE" ]; then
                DUE="$NEW_DUE"
            fi
            if [ -n "$NEW_NOTE" ]; then
                NOTE="$NEW_NOTE"
            fi

            # After merging, check length constraints
            check_length "$NAME"      "$MAX_NAME"     "Name"
            check_length "$PRIORITY"  "$MAX_PRIORITY" "Priority"
            check_length "$DUE"       "$MAX_DUE"      "Due"
            check_length "$NOTE"      "$MAX_NOTE"     "Note"
        fi
        MOD_DATA+="${ID},${NAME},${PRIORITY},${DUE},${NOTE}\n"
    done < "$TASKS_DATA"

    if [ "$FOUND" = "false" ]; then
        echo "${RED}Error: Task with ID '$TARGET_ID' not found.${RESET}"
        exit 1
    fi

    echo -e "$MOD_DATA" | sed '/^$/d' > "$TASKS_DATA"
    echo "Task with ID '$TARGET_ID' updated."
}

delete_task() {
    local INPUT_ID="$1"
    if [ -z "$INPUT_ID" ]; then
        echo "${RED}Error: you must specify an ID to delete.${RESET}"
        exit 1
    fi

    local MOD_DATA=""
    local FOUND="false"

    while IFS=',' read -r ID NAME PRIORITY DUE NOTE; do
        [ -z "$ID" ] && continue
        if [ "$ID" = "$INPUT_ID" ]; then
            FOUND="true"
            continue
        fi
        MOD_DATA+="${ID},${NAME},${PRIORITY},${DUE},${NOTE}\n"
    done < "$TASKS_DATA"

    if [ "$FOUND" = "false" ]; then
        echo "${RED}Error: Task with ID '$INPUT_ID' not found.${RESET}"
        exit 1
    fi

    echo -e "$MOD_DATA" | sed '/^$/d' > "$TASKS_DATA"
    echo "Task with ID '$INPUT_ID' deleted."

    # Realign tasks so there are no permanent ID gaps
    local reordered=""
    local i=1

    while IFS=',' read -r ID NAME PRIORITY DUE NOTE; do
        [ -z "$ID" ] && continue
        reordered+="${i},${NAME},${PRIORITY},${DUE},${NOTE}\n"
        ((i++))
    done < "$TASKS_DATA"

    echo -e "$reordered" | sed '/^$/d' > "$TASKS_DATA"
    echo "Some tasks have been reordered to remove ID gaps."
}

swap_task() {
    local ID1="$1"
    local ID2="$2"
        if [ -z "$ID1" ] || [ -z "$ID2" ]; then
        echo "${RED}Error: you must specify two IDs to swap.${RESET}"
        exit 1
    fi

    local FOUND1="false"
    local FOUND2="false"
    local MOD_DATA=""

    while IFS=',' read -r ID NAME PRIORITY DUE NOTE; do
        [ -z "$ID" ] && continue
        if [ "$ID" = "$ID1" ]; then
            FOUND1="true"
            ID="$ID2"
        elif  [ "$ID" = "$ID2" ]; then
            FOUND2="true"
            ID="$ID1"
        fi
        MOD_DATA+="${ID},${NAME},${PRIORITY},${DUE},${NOTE}\n"
    done < "$TASKS_DATA"

    if [ "$FOUND1" = "false" ] || [ "$FOUND2" = "false" ]; then
        echo "${RED}Error: One or both IDs not found in file.${RESET}"
        exit 1
    fi

    echo -e "$MOD_DATA" | sed '/^$/d' > "$TASKS_DATA"
    sort -t',' -k1n "$TASKS_DATA" -o "$TASKS_DATA"
    echo "Tasks with IDs $ID1 and $ID2 have been swapped."
}


# *main logic*
if [ $# -eq 0 ]; then
    list_task
    exit 0
fi

# argument parsing
case "$1" in 
    -ai|--add-interactive)
        # Interactive mode: prompt user for each field
        echo "Enter new task details (interactive mode)."
        
        read -p "Task Name (required): " NAME
        if [ -z "$NAME" ]; then
            echo "${RED}Error: A task name is required.${RESET}"
            exit 1
        fi
        read -p "Priority (optional): " PRIORITY
        read -p "Due Date (optional): " DUE
        read -p "Additional Note (optional): " NOTE
        add_task "$NAME" "$PRIORITY" "$DUE" "$NOTE"
        ;;

    -a|--add)
        # example: plcli -a "NAME" {FLAG} [all other arguments optional] {FLAG} [...]
        shift
        NAME=""
        PRIORITY=""
        DUE=""
        NOTE=""

        # Check for name, non-optional.
        if [[ $# -gt 0 ]]; then
            NAME="$1"
            shift
        else
            echo "${RED}Error: No name provided with --add argument.${RESET}"
            echo "plcli -h for usage help."
            exit 1
        fi

        # Loop through command args to find optional flags.
        while [[ $# -gt 0 ]]; do
            KEY="$1"
            case $KEY in
                -p|--priority)
                    PRIORITY="$2"
                    shift
                    shift
                    ;;
                -d|--due-date)
                    DUE="$2"
                    shift
                    shift
                    ;;
                -n|--note|--notes)
                    NOTE="$2"
                    shift
                    shift
                    ;;
                *)
                    echo "${RED}Error: unknown add argument: $1${RESET}"
                    exit 1
                    ;;
            esac
        done

        add_task "$NAME" "$PRIORITY" "$DUE" "$NOTE"
        ;;

    -u|--update)
        shift
        ID="$1"
        shift
        NEW_NAME=""
        NEW_PRIORITY=""
        NEW_DUE=""
        NEW_NOTE=""

        # TODO: test for when ID isn't supplied, inform user!
        while [[ $# > 0 ]]; do
            KEY="$1"
            case $KEY in
                -t|--title)
                    NEW_NAME="$2"
                    shift 2
                    ;;
                -p|--priority)
                    NEW_PRIORITY="$2"
                    shift 2
                    ;;
                -d|--due)
                    NEW_DUE="$2"
                    shift 2
                    ;;
                -n|--note)
                    NEW_NOTE="$2"
                    shift 2
                    ;;
                *)
                    echo "${RED}Error: unknown update argument: $1${RESET}"
                    exit 1
                    ;;
            esac
        done

        update_task "$ID" "$NEW_NAME" "$NEW_PRIORITY" "$NEW_DUE" "$NEW_NOTE"
        ;;
    
    -d|--delete)
        shift
        ID="$1"
        delete_task "$ID"
        ;;

    -s|--swap)
        shift
        ID1="$1"
        ID2="$2"
        swap_task "$ID1" "$ID2"
        ;;

    -h|--help)
        help_task
        ;;
    *)
        echo "${RED}Error: unknown option: $1${RESET}"
        help_task
        exit 1
        ;;
esac    

